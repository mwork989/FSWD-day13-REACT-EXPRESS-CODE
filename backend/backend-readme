Core modules - are modules which are installed when we install node.js 
and here are full list of core modules

assert: Provides a set of assertion tests for verifying invariants.

buffer: Deals with binary data directly through a Buffer object.

child_process: Enables running child processes.

cluster: Allows forking of processes to take advantage of multi-core systems.

crypto: Provides cryptographic functionality including a set of wrappers for OpenSSL's hash, HMAC, cipher, decipher, sign, and verify functions.

dgram: Provides implementation for UDP datagram sockets.

dns: Includes functions to perform name resolution and DNS lookups.

events: Provides the EventEmitter class, central to many Node.js APIs.

fs: File system operations, such as reading and writing files.

http: Provides HTTP server and client functionality.

https: Similar to the HTTP module, but for HTTPS.

net: Provides an asynchronous network API for creating stream-based TCP or IPC servers and clients.

os: Provides basic operating-system related utility functions.

path: Contains utilities for handling and transforming file paths.

process: Provides information about and control over the current Node.js process.

querystring: Provides utilities for parsing and formatting URL query strings.

readline: Provides a way of reading a line from an input stream one line at a time.

repl: Provides a Read-Eval-Print Loop (REPL) implementation.

stream: Abstract interface implemented by various objects in Node.js.

string_decoder: Provides a way of decoding Buffer objects into strings.

timers: Provides functions to execute a function after a set amount of time.

tls: Provides a TLS (formerly known as SSL) implementation.

url: Provides utilities for URL resolution and parsing.

util: Provides utilities in various areas.

v8: Exposes APIs that are specific to the version of V8 built with Node.js.

vm: Provides APIs for compiling and running scripts within V8 Virtual Machine contexts.

zlib: Provides compression functionality implemented using Gzip and Deflate/Inflat



24/12/2023- notes

A URL is a reference (an address) to a resource on the Internet. It specifies the location of a web resource (like a web page) and the mechanism for retrieving it, typically via HTTP or HTTPS. 

"HTTP" stands for "Hypertext Transfer Protocol." It is the foundation of data communication for the World Wide Web. 

HTTP defines how messages are formatted and transmitted, and what actions web servers and browsers should take in response to various commands.

 For example, when you enter a URL in your web browser, this actually sends an HTTP command to the web server directing it to fetch and transmit the requested web page.


HTTP (Hypertext Transfer Protocol) methods, also known as HTTP verbs, define the action to be performed on a given resource


GET: Requests data from a specified resource. It's used to retrieve information from the server. GET requests should only retrieve data and should not have any other effect on the data.


POST: Sends data to a server to create/update a resource. It's often used when submitting form data or uploading a file.

PUT: Replaces all current representations of the target resource with the uploaded content. It's used to update a resource completely.

DELETE: Removes the specified resource. This method is used to delete a resource identified by a URL.


Install postman , mongodb 7 version



const response = new Promise();

response.then((data)=>{
    console.log(data)
}).catch((error)=>{
    console.log(error)
})



POSTMAN API END POINT requests
---------------------------

POST - http://localhost:4002/addStudent   ; Body--> Raw--> JSON -  { name: 'Alice', age: 30 };
GET  - http://localhost:4002/viewAllStudents
GET  - http://localhost:4002/viewStudentById/Akita
GET  - http://localhost:4002/viewStudentById/659a9564418354d76bae6ef3
GET  - http://localhost:4002/viewStudentByQueryParam?name=David&age=20

PUT/PATCH  - http://localhost:4002/updateStudent/659a9564418354d76bae6ef3 : body --> raw -JSON - {
    "name":"Mystry Alaba2",
    "age":27
}

DELETE -  http://localhost:4002/deleteStudent/659a9564418354d76bae6ef3


C. R.U. D operations using node js with mongodb using mongoose package
mongoose methods used 
1. For creation  - Create
2. For Reading   - find, findbyId
3. For update    - findbyIdAndUpdate
4. For Delete    - findbyIdAndDelete
5. For Connecting - connect  


